import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';

export default async function handle(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    res.setHeader('Allow', ['GET']);
    return res.status(405).json({ message: `Method ${req.method} not allowed` });
  }

  try {
    // ‡∏£‡∏±‡∏ö userId ‡∏à‡∏≤‡∏Å query parameter
    const { userId } = req.query;
    if (!userId) {
      return res.status(400).json({ message: 'Missing userId' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (borrow_equipment_status: 2)
    // ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (borrow_user_id ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö userId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
    const approvedBorrowEquipment = await prisma.borrowequipment.findMany({
      where: {
        borrow_equipment_status: 2, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        borrow_user_id: Number(userId), // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
      },
      select: {
        borrow_id: true,
        borrow_date: true,
        borrow_return: true,
        borrowequipment_list: {
          select: {
            borrow_equipment_id: true,
            equipment_id: true,
            equipment: {
              select: {
                equipment_name: true,
                equipment_code: true,
              },
            },
          },
        },
      },
      orderBy: {
        borrow_id: 'desc',
      },
    });

    return res.status(200).json({ message: 'success', data: approvedBorrowEquipment });
  } catch (error) {
    console.error("üöÄ ~ GET /api/borrowequipment/list ~ error:", error);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', data: error });
  }
}
