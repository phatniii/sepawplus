import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';

export default async function handle(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try {
      const { returnList } = req.body; // returnList ‡∏Ñ‡∏∑‡∏≠ array ‡∏Ç‡∏≠‡∏á borrow_equipment_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
      if (!Array.isArray(returnList) || returnList.length === 0) {
        return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô' });
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ equipment_id ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á borrowequipment_list ‡∏ï‡∏≤‡∏° borrow_equipment_id ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
      const borrowListItems = await prisma.borrowequipment_list.findMany({
        where: {
          borrow_equipment_id: { in: returnList },
        },
        select: {
          equipment_id: true,
        },
      });

      const equipmentIds = borrowListItems.map(item => item.equipment_id);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á equipment ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0 (‡∏ß‡πà‡∏≤‡∏á)
      await prisma.equipment.updateMany({
        where: {
          equipment_id: { in: equipmentIds },
        },
        data: {
          equipment_status: 0,
        },
      });

      // (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á borrowequipment ‡∏´‡∏£‡∏∑‡∏≠ borrowequipment_list ‡∏î‡πâ‡∏ß‡∏¢)
      
      return res.status(200).json({ message: '‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (error) {
      console.error("üöÄ ~ POST /api/borrowequipment/return ~ error:", error);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', data: error });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ message: `Method ${req.method} not allowed` });
  }
}
