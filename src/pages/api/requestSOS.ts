import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';
import { replyNotificationSOS } from '@/utils/apiLineReply';
import axios from 'axios';

const LINE_ACCESS_TOKEN = process.env.CHANNEL_ACCESS_TOKEN_LINE || '';

const LINE_HEADER = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
async function getQuota() {
    try {
        const response = await axios.get('https://api.line.me/v2/bot/message/quota', {
            headers: LINE_HEADER
        });
        return response.data?.value ?? -1; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á -1
    } catch (error) {
        console.error("‚ùå Failed to fetch quota:", error);
        return -1;
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
async function getUsedQuota() {
    try {
        const response = await axios.get('https://api.line.me/v2/bot/message/quota/consumption', {
            headers: LINE_HEADER
        });
        return response.data?.totalUsage ?? -1; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á -1
    } catch (error) {
        console.error("‚ùå Failed to fetch used quota:", error);
        return -1;
    }
}

export default async function handle(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== 'POST') {
        res.setHeader('Allow', ['POST']);
        return res.status(405).json({ message: `‡∏ß‡∏¥‡∏ò‡∏µ ${req.method} ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï` });
    }

    if (req.headers['content-type'] !== 'application/json') {
        return res.status(400).json({ message: 'error', error: "Content-Type must be application/json" });
    }

    const body = req.body;
    const { uid } = req.body;

    console.log("üì• Received Request Body:", req.body);
    console.log("üîç Checking UID:", uid);

    if (!uid) {
        return res.status(400).json({ message: 'error', data: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå uid' });
    }

    if (isNaN(Number(uid))) {
        return res.status(400).json({ message: 'error', data: '‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå uid ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç' });
    }

    try {
        const user = await prisma.users.findFirst({
            where: { users_id: Number(uid) }
        });

        const takecareperson = await prisma.takecareperson.findFirst({
            where: { users_id: user?.users_id, takecare_status: 1 }
        });

        if (!user || !takecareperson) {
            return res.status(400).json({ message: 'error', data: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        const message = `‡∏Ñ‡∏∏‡∏ì ${takecareperson.takecare_fname} ${takecareperson.takecare_sname} \n‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô`;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Quota ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const quota = await getQuota();
        const usedQuota = await getUsedQuota();
        console.log(`üìä Total Quota: ${quota}`);
        console.log(`üìä Used Quota: ${usedQuota}`);

        if (quota !== -1 && usedQuota !== -1 && usedQuota >= quota) {
            return res.status(429).json({
                message: 'error',
                data: `Rate Limit Exceeded. Usage: ${usedQuota}/${quota}`
            });
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LINE API
        const replyToken = user.users_line_id || '';
        await replyNotificationSOS({ replyToken, message });

        return res.status(200).json({ message: 'success', data: user });

    } catch (error) {
        console.error("‚ùå Error:", error);
        return res.status(500).json({ message: 'error', data: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' });
    }
}
