import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';
import { replyNotificationSOS } from '@/utils/apiLineReply';
import axios from 'axios';

const LINE_ACCESS_TOKEN = process.env.CHANNEL_ACCESS_TOKEN_LINE || '';

const LINE_HEADER = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
};

export default async function handle(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== 'POST') {
        res.setHeader('Allow', ['POST']);
        return res.status(405).json({ message: `‡∏ß‡∏¥‡∏ò‡∏µ ${req.method} ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï` });
    }

    if (req.headers['content-type'] !== 'application/json') {
        return res.status(400).json({ message: 'error', error: "Content-Type must be application/json" });
    }

    const body = req.body;
    const { uid } = req.body;

    console.log("üì• Received Request Body:", req.body);
    console.log("üîç Checking UID:", uid);

    if (!uid) {
        return res.status(400).json({ message: 'error', data: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå uid' });
    }

    if (isNaN(Number(uid))) {
        return res.status(400).json({ message: 'error', data: '‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå uid ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç' });
    }

    try {
        const user = await prisma.users.findFirst({
            where: { users_id: Number(uid) }
        });

        const takecareperson = await prisma.takecareperson.findFirst({
            where: { users_id: user?.users_id, takecare_status: 1 }
        });

        if (!user || !takecareperson) {
            return res.status(400).json({ message: 'error', data: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        const message = `‡∏Ñ‡∏∏‡∏ì ${takecareperson.takecare_fname} ${takecareperson.takecare_sname} \n‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô`;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rate Limit ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        try {
            const rateLimitResponse = await axios.get('https://api.line.me/v2/bot/info', {
                headers: LINE_HEADER
            });

            const remainingRequests = Number(rateLimitResponse.headers['x-ratelimit-remaining']);
            const resetTime = Number(rateLimitResponse.headers['x-ratelimit-reset']);

            console.log(`üö¶ Remaining Requests: ${remainingRequests}`);
            console.log(`‚è≥ Reset Time: ${new Date(resetTime * 1000)}`);

            if (remainingRequests <= 0) {
                return res.status(429).json({
                    message: 'error',
                    data: `Rate Limit Exceeded. Try again after ${new Date(resetTime * 1000)}`
                });
            }
        } catch (rateError) {
            console.error("‚ùå Failed to check Rate Limit:", rateError);
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LINE API
        const replyToken = user.users_line_id || '';
        await replyNotificationSOS({ replyToken, message });

        return res.status(200).json({ message: 'success', data: user });

    } catch (error) {
        console.error("‚ùå Error:", error);
        return res.status(500).json({ message: 'error', data: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' });
    }
}
