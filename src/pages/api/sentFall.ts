import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';
import { replyNotificationPostbackfall } from '@/utils/apiLineReply';
import moment from 'moment';

type Data = {
    message: string;
    data?: any;
};

export default async function handle(req: NextApiRequest, res: NextApiResponse<Data>) {
    if (req.method === 'PUT' || req.method === 'POST') {
        try {
            const body = req.body;
            const fallStatus = Number(body.fall_status);

            // --- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
             if (
                !body.users_id ||
                !body.takecare_id ||
                body.x_axis === undefined ||
                body.y_axis === undefined ||
                body.z_axis === undefined ||
                body.fall_status === undefined ||
                body.latitude === undefined ||
                body.longitude === undefined
            ) {
                return res.status(400).json({ message: 'error', data: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå users_id, takecare_id, x_axis, y_axis, z_axis, fall_status, latitude, longitude' });
            }

            if (
                isNaN(Number(body.users_id)) ||
                isNaN(Number(body.takecare_id)) ||
                isNaN(fallStatus)
            ) {
                return res.status(400).json({ message: 'error', data: 'users_id, takecare_id, fall_status ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç' });
            }

            const user = await prisma.users.findUnique({
                where: { users_id: Number(body.users_id) }
            });

            const takecareperson = await prisma.takecareperson.findUnique({
                where: { takecare_id: Number(body.takecare_id) }
            });

            if (!user || !takecareperson) {
                return res.status(200).json({ message: 'error', data: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏´‡∏£‡∏∑‡∏≠ takecareperson' });
            }

            // --- ‡∏´‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πâ‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ô‡∏µ‡πâ ---
            let lastFall = await prisma.fall_records.findFirst({
                where: {
                    users_id: user.users_id,
                    takecare_id: takecareperson.takecare_id,
                },
                orderBy: { fall_timestamp: 'desc' }
            });

            let noti_status: number | null = null;
            let noti_time: Date | null = null;

            // --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏° (‡∏£‡∏≠‡πÄ‡∏ã‡∏ü noti_status/noti_time ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡πâ‡∏≤‡∏¢) ---
            const fallData: any = {
                users_id: user.users_id,
                takecare_id: takecareperson.takecare_id,
                x_axis: Number(body.x_axis),
                y_axis: Number(body.y_axis),
                z_axis: Number(body.z_axis),
                fall_latitude: body.latitude,
                fall_longitude: body.longitude,
                fall_status: fallStatus
            };

            // --- ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 2, 3 ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ ---
            if ((fallStatus === 2 || fallStatus === 3) && (
                !lastFall || lastFall.noti_status !== 1 || moment().diff(moment(lastFall.noti_time), 'minutes') >= 5
            )) {
                const message = fallStatus === 2
                    ? `‡∏Ñ‡∏∏‡∏ì ${takecareperson.takecare_fname} ${takecareperson.takecare_sname} ‡∏Å‡∏î "‡πÑ‡∏°‡πà‡πÇ‡∏≠‡πÄ‡∏Ñ" ‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠`
                    : `‡∏Ñ‡∏∏‡∏ì ${takecareperson.takecare_fname} ${takecareperson.takecare_sname} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;

                const replyToken = user.users_line_id || '';
                if (replyToken) {
                    await replyNotificationPostbackfall({
                        userId: user.users_id,
                        takecarepersonId: takecareperson.takecare_id,
                        type: 'fall',
                        message,
                        replyToken,
                    });
                }

                noti_status = 1;
                noti_time = new Date();
            } else {
                noti_status = 0;
                noti_time = null;
                console.log("‡∏•‡πâ‡∏°‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ");
            }

            // --- ‡πÄ‡∏û‡∏¥‡πà‡∏° field noti_status, noti_time (‡∏ñ‡πâ‡∏≤ model ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö) ---
            fallData.noti_status = noti_status;
            fallData.noti_time = noti_time;

            await prisma.fall_records.create({ data: fallData });

            return res.status(200).json({ message: 'success', data: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });

        } catch (error) {
            console.error("üöÄ ~ API /sentFall error:", error);
            return res.status(400).json({ message: 'error', data: error });
        }
    } else {
        res.setHeader('Allow', ['PUT', 'POST']);
        return res.status(405).json({ message: 'error', data: `‡∏ß‡∏¥‡∏ò‡∏µ ${req.method} ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï` });
    }
}
